<%= form_with(model: @shop_item, url: (@shop_item.persisted? ? admin_shop_item_path(@shop_item) : admin_shop_items_path), method: (@shop_item.persisted? ? :patch : :post), local: true) do |form| %>
  <% if @shop_item.errors.any? %>
    <div class="alert alert-danger">
      <h4><%= pluralize(@shop_item.errors.count, "error") %> prohibited this shop item from being saved:</h4>
      <ul>
        <% @shop_item.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row">
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :type, class: "form-label" %>
        <%= form.select :type, @shop_item_types, { include_blank: "Select a type" }, { class: "form-select" } %>
      </div>

      <div class="mb-3">
        <%= form.label :name, class: "form-label" %>
        <%= form.text_field :name, class: "form-control" %>
      </div>

      <div class="mb-3">
        <%= form.label :description, class: "form-label" %>
        <%= form.text_area :description, rows: 3, class: "form-control" %>
      </div>

      <div class="mb-3">
        <%= form.label :internal_description, "Internal Description (admin only)", class: "form-label" %>
        <%= form.text_area :internal_description, rows: 2, class: "form-control" %>
      </div>

      <div class="mb-3">
        <%= form.label :image, class: "form-label" %>
        <%= form.file_field :image, class: "form-control" %>
        <% if @shop_item.persisted? && @shop_item.image.attached? %>
          <div class="mt-2">
            <small>Current image:</small><br>
            <%= image_tag @shop_item.image.variant(:thumb), width: 100 %>
          </div>
        <% end %>
      </div>
    </div>

    <div class="col-md-6">
      <div class="row">
        <div class="col-md-6">
          <div class="mb-3">
            <%= form.label :ticket_cost, class: "form-label" %>
            <%= form.number_field :ticket_cost, step: 0.01, class: "form-control", id: "shop_item_ticket_cost" %>
          </div>
        </div>
        <div class="col-md-6">
          <div class="mb-3">
            <%= form.label :usd_cost, class: "form-label" %>
            <%= form.number_field :usd_cost, step: 0.01, class: "form-control", id: "shop_item_usd_cost" %>
          </div>
        </div>
      </div>

      <!-- Calculation Results -->
      <div class="row">
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label">Estimated Tickets</label>
            <input type="text" id="estimated_tickets" readonly>
          </div>
        </div>
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label">Average Hours Estimated</label>
            <input type="text" id="average_hours_estimated" readonly>
          </div>
        </div>
      </div>

      <div class="row">
        <div class="col-md-6">
          <div class="mb-3">
            <%= form.label :hacker_score, "Hacker Score (%)", class: "form-label" %>
            <%= form.number_field :hacker_score, min: 0, max: 100, value: (@shop_item.hacker_score || 50), class: "form-control", id: "shop_item_hacker_score" %>
          </div>
        </div>
        <div class="col-md-6">
          <div class="mb-3">
            <%= form.label :max_qty, "Max Quantity", class: "form-label" %>
            <%= form.number_field :max_qty, class: "form-control" %>
          </div>
        </div>
      </div>

      <div class="mb-3">
        <div class="form-check">
          <%= form.check_box :requires_black_market, class: "form-check-input" %>
          <%= form.label :requires_black_market, "Requires Black Market", class: "form-check-label" %>
        </div>
      </div>

      <div class="mb-3">
        <div class="form-check">
          <%= form.check_box :show_in_carousel, class: "form-check-input" %>
          <%= form.label :show_in_carousel, "Show in Carousel", class: "form-check-label" %>
        </div>
      </div>

      <div class="mb-3">
        <div class="form-check">
          <%= form.check_box :one_per_person_ever, class: "form-check-input" %>
          <%= form.label :one_per_person_ever, "One Per Person Ever", class: "form-check-label" %>
        </div>
      </div>

      <div class="mb-3">
        <div class="form-check">
          <%= form.check_box :limited, class: "form-check-input", id: "shop_item_limited" %>
          <%= form.label :limited, "Limited Stock", class: "form-check-label" %>
        </div>
      </div>

      <div class="mb-3" id="stock_field_container">
        <%= form.label :stock, "Stock Quantity", class: "form-label" %>
        <%= form.number_field :stock, min: 0, class: "form-control", id: "shop_item_stock" %>
        <small class="form-text text-muted">Number of items available for purchase</small>
      </div>

      <h5>HCB Locks</h5>
      <div class="mb-3">
        <%= form.label :hcb_merchant_lock, "HCB Merchant Lock", class: "form-label" %>
        <%= form.text_field :hcb_merchant_lock, class: "form-control" %>
      </div>

      <div class="mb-3">
        <%= form.label :hcb_category_lock, "HCB Category Lock", class: "form-label" %>
        <%= form.text_field :hcb_category_lock, class: "form-control" %>
      </div>

      <div class="mb-3">
        <%= form.label :hcb_keyword_lock, "HCB Keyword Lock", class: "form-label" %>
        <%= form.text_field :hcb_keyword_lock, class: "form-control" %>
      </div>

      <div class="mb-3">
        <%= form.label :agh_contents, "AGH Contents (JSON)", class: "form-label" %>
        <%= form.text_area :agh_contents, rows: 4, class: "form-control", placeholder: "Enter valid JSON" %>
      </div>
    </div>
  </div>

  <div class="actions">
    <%= form.submit class: "btn btn-primary" %>
    <%= link_to 'Cancel', admin_shop_items_path, class: "btn btn-secondary" %>
  </div>
<% end %>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Game constants from Rails configuration
        const gameConstants = {
            doubloons_per_dollar: <%= Rails.configuration.game_constants.tickets_per_dollar.to_json %>,
            dollars_per_mean_hour: <%= Rails.configuration.game_constants.dollars_per_mean_hour.to_json %>
        };

        // Get form elements
        const usdCostField = document.getElementById('shop_item_usd_cost');
        const ticketCostField = document.getElementById('shop_item_ticket_cost');
        const hackerScoreField = document.getElementById('shop_item_hacker_score');
        const estimatedTicketsDisplay = document.getElementById('estimated_tickets');
        const averageHoursDisplay = document.getElementById('average_hours_estimated');

        function calculateEstimatedTickets() {
            const usdCost = parseFloat(usdCostField.value) || 0;
            const hackerScore = parseFloat(hackerScoreField.value) || 50;

            // Formula: contest__doubloons_per_dollar * unit_cost * (0.5 + (1 - hacker_score_percent))
            // Always use usd_cost as the base for ticket estimation
            // Convert hacker_score from 0-100 to 0-1 range
            const hackerScorePercent = hackerScore / 100;
            const estimatedTickets = gameConstants.doubloons_per_dollar * usdCost * (0.5 + (1 - hackerScorePercent));

            return estimatedTickets;
        }

        function calculateAverageHours() {
            const ticketCost = parseFloat(ticketCostField.value) || 0;

            // Formula: ticket_cost / (contest__doubloons_per_dollar * contest__dollars_per_mean_hour)
            const averageHours = ticketCost / (gameConstants.doubloons_per_dollar * gameConstants.dollars_per_mean_hour);

            return averageHours;
        }

        function updateCalculations() {
            const estimatedTickets = calculateEstimatedTickets();
            const averageHours = calculateAverageHours();

            estimatedTicketsDisplay.value = estimatedTickets.toFixed(2);
            averageHoursDisplay.value = averageHours.toFixed(2);
        }

        // Add event listeners for live updates
        if (usdCostField) usdCostField.addEventListener('input', updateCalculations);
        if (ticketCostField) ticketCostField.addEventListener('input', updateCalculations);
        if (hackerScoreField) hackerScoreField.addEventListener('input', updateCalculations);

        // Initial calculation on page load
        updateCalculations();

        // Handle limited stock checkbox
        const limitedCheckbox = document.getElementById('shop_item_limited');
        const stockFieldContainer = document.getElementById('stock_field_container');

        function toggleStockField() {
            if (limitedCheckbox.checked) {
                stockFieldContainer.style.display = 'block';
            } else {
                stockFieldContainer.style.display = 'none';
            }
        }

        if (limitedCheckbox) {
            limitedCheckbox.addEventListener('change', toggleStockField);
            // Initial state on page load
            toggleStockField();
        }
    });
</script>
