<%
  # Fetch user's IDV addresses
  addresses = []
  primary_address_id = nil
  selected_region = local_assigns[:selected_region]
  regionalization_enabled = local_assigns[:regionalization_enabled]
  shop_item = local_assigns[:shop_item]

  if user.identity_vault_access_token.present?
    begin
      idv_data = user.fetch_idv
      addresses = idv_data.dig(:identity, :addresses) || []
      primary_address = addresses.find { |addr| addr[:primary] == true }
      primary_address_id = primary_address&.dig(:id)
    rescue => e
      Rails.logger.error "Failed to fetch IDV addresses: #{e.message}"
    end
  end

  # Helper function to check if address is valid for current region
  def address_valid_for_region?(address, selected_region, regionalization_enabled, shop_item)
    return true unless regionalization_enabled && selected_region && address[:country]

    address_region = Shop::Regionalizable.country_to_region(address[:country])
    # Address is valid if:
    # 1. It matches the selected region, OR
    # 2. The item is enabled for XX (Rest of World) and address is anywhere, OR
    # 3. The item is enabled for the address's specific region
    address_region == selected_region ||
      (shop_item&.enabled_in_region?("XX")) ||
      (shop_item&.enabled_in_region?(address_region))
  end
%>

<div class="address-picker">
  <% if addresses.any? %>
    <%= form.label field_name, label_text, class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%
      # Find the first valid address for auto-selection
      valid_addresses = addresses.select { |addr| address_valid_for_region?(addr, selected_region, regionalization_enabled, shop_item) }
      auto_select_id = valid_addresses.find { |addr| addr[:id] == primary_address_id }&.dig(:id) || valid_addresses.first&.dig(:id)
    %>
    <%= form.select field_name,
        options_for_select(addresses.map { |addr|
          is_valid = address_valid_for_region?(addr, selected_region, regionalization_enabled, shop_item)
          display_text = "#{addr[:line_1]}, #{addr[:city]}, #{addr[:state]} #{addr[:zip]}"
          display_text += " (Not available in current region)" unless is_valid
          [display_text, addr[:id], { disabled: !is_valid, class: is_valid ? "" : "text-gray-400" }]
        }, auto_select_id),
        { prompt: "Select an address" },
        { class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" } %>

    <div class="mt-2 space-y-1">
      <% addresses.each do |address| %>
        <%
          is_valid = address_valid_for_region?(address, selected_region, regionalization_enabled, shop_item)
          is_selected = address[:id] == auto_select_id
        %>
        <div class="text-xs address-preview <%= is_valid ? 'text-gray-500' : 'text-gray-400' %>"
             data-address-id="<%= address[:id] %>"
             data-valid="<%= is_valid %>"
             style="<%= 'display: none;' unless is_selected %>">

          <% unless is_valid %>
            <div class="bg-red-50 border border-red-200 rounded p-2 mb-2">
              <div class="flex items-center">
                <span class="text-red-500 mr-1">⚠️</span>
                <span class="text-red-700 font-medium text-xs">Not available in <%= Shop::Regionalizable.region_name(selected_region) %></span>
              </div>
              <div class="text-red-600 text-xs mt-1">
                This address is in <%= Shop::Regionalizable.region_name(Shop::Regionalizable.country_to_region(address[:country])) %> region
              </div>
            </div>
          <% end %>

          <div class="<%= is_valid ? '' : 'opacity-50' %>">
            <div><%= address[:first_name] %> <%= address[:last_name] %></div>
            <div><%= address[:line_1] %></div>
            <% if address[:line_2].present? %>
              <div><%= address[:line_2] %></div>
            <% end %>
            <div><%= address[:city] %>, <%= address[:state] %> <%= address[:postal_code] %></div>
            <div><%= address[:country] %></div>
            <% if address[:primary] %>
              <span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mt-1">
                Primary
              </span>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const select = document.querySelector('select[name="<%= field_name.to_json %>"]');
        const previews = document.querySelectorAll('.address-preview');
        const submitButton = document.getElementById('purchase-button');

        function updateAddressValidation() {
          const selectedId = select?.value;
          const selectedPreview = document.querySelector(`.address-preview[data-address-id="${selectedId}"]`);
          const isValid = selectedPreview?.dataset?.valid === 'true';
          const regionalizationEnabled = <%= (regionalization_enabled || false).to_json %>;

          // Show/hide address previews
          previews.forEach(preview => {
            preview.style.display = preview.dataset.addressId === selectedId ? 'block' : 'none';
          });

          // Update submit button based on address validity (only if regionalization is enabled)
          if (submitButton && regionalizationEnabled) {
            if (selectedId && isValid) {
              // Valid address selected - enable button and use normal styling
              submitButton.classList.remove('region-invalid');
              submitButton.removeAttribute('data-region-invalid');
              submitButton.disabled = false;
              submitButton.value = 'Get!';
              submitButton.className = 'w-full bg-forest hover:bg-forest/90 text-white font-bold py-4 px-6 btn-pixel text-lg transition-colors duration-200 cursor-pointer';
            } else if (selectedId && !isValid) {
              // Invalid address selected - show specific error
              submitButton.classList.add('region-invalid');
              submitButton.setAttribute('data-region-invalid', 'true');
              submitButton.disabled = true;
              submitButton.value = 'Address Not Available';
              submitButton.className = 'w-full bg-red-400 text-red-800 font-bold py-4 px-6 btn-pixel text-lg cursor-not-allowed';
            } else {
              // No address selected - show generic message
              submitButton.classList.remove('region-invalid');
              submitButton.removeAttribute('data-region-invalid');
              submitButton.disabled = true;
              submitButton.value = 'Select Valid Address';
              submitButton.className = 'w-full bg-gray-400 text-gray-600 font-bold py-4 px-6 btn-pixel text-lg cursor-not-allowed';
            }
          }
        }

        if (select) {
          select.addEventListener('change', updateAddressValidation);
          // Run initial check after a brief delay to ensure DOM is fully ready
          setTimeout(updateAddressValidation, 100);
        }
      });
    </script>
  <% else %>
    <div class="bg-yellow-50 border border-yellow-200 rounded-md p-3">
      <div class="flex">
        <div class="ml-3">
          <h3 class="text-sm font-medium text-yellow-800">
            No addresses found
          </h3>
          <div class="mt-2 text-sm text-yellow-700">
            <p>You need to add an address first!.</p>
          </div>
          <div class="mt-4">
            <div class="-mx-2 -my-1.5 flex">
              <%= link_to "Add Address",
                  IdentityVaultService.build_address_creation_url({ address_return_to: request.url }),
                  class: "text-blue-600 hover:text-blue-800 underline font-medium",
                  target: "_blank" %>
            </div>
          </div>
        </div>
      </div>
    </div>
  <% end %>
  <div class="mt-3">
    <%= link_to "Manage addresses", "#{IdentityVaultService.host}/addresses",
        class: "text-blue-600 hover:text-blue-800 underline text-sm",
        target: "_blank" %>
  </div>
</div>
