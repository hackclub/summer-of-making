<%#
  Parameters:
    - target:
        Will be passed to link_to. Required if 'as_button' is not specified.
    - text:
        The text to display in the link. Required.
    - class:
        The classes to apply.
    - icon:
        An icon identifier. You can find all icons in '/app/assets/images/icons'.
        You shouldn't include the '.svg' extension.
    - highlight:
        If true, the link will always be highlighted. Defaults to false.
    - content_attr:
        The attributes to assign to the content.
    - text_attr:
        The attributes to assign to the text (NOT the icon).
    - icon_size:
        A string representing an integer that specifies the size of the icon. Overrides
        the default icon sizes (different for when `large` is `true` or `false`).
    - as_button:
        If defined, a <button> will be produced instead of a link. The given attributes
        will be assigned to it as well.
    - method:
        If defined, instead of a regular `button` or `a` tag, `button_to` will be used
        to use the different HTTP method with the `target`.
    - underline_attr:
        The attributes to assign to the underline decoration.
    - large:
        If true, a the link will be styled to be larger. (text-2xl, larger icon,
        larger underline). Defaults to false.
    - hop:
        If true, when hovered, the link content will do a small, cute little hop!
    - animate_push:
        If true, when clicked, the link will have a push-in animation.
%>
<% raise "shared/link requires 'text' as a local" unless local_assigns[:text] %>

<% as_button        = local_assigns[:as_button] %>
<% highlight        = local_assigns.fetch(:highlight, false) %>
<% large            = local_assigns.fetch(:large, false) %>
<% hop              = local_assigns.fetch(:hop, false) %>
<% animate_push     = local_assigns.fetch(:animate_push, false) %>
<% content_attr     = local_assigns.fetch(:content_attr, {}) %>
<% text_attr        = local_assigns.fetch(:text_attr, {}) %>
<% underline_attr   = local_assigns.fetch(:underline_attr, {}) %>
<% icon_size        = local_assigns.fetch(:icon_size, large ? '8' : '6') %>
<% http_method      = local_assigns.fetch(:method, :get) %>

<% base_class   = "relative inline-block group py-2 cursor-pointer #{'text-2xl' if large}" %>
<% final_class  = [base_class, local_assigns[:class]].compact.join(" ") %>

<% icon_class = "w-#{icon_size} #{'mr-4' if large} h-#{icon_size}".strip %>
<%
  underline_attr_class = underline_attr[:class]
  underline_data       = (underline_attr[:data] || {})
  underline_class = "
    absolute transition-all duration-150 bottom-1 w-full pr-3 box-content
    bg-som-highlight rounded-full z-0 group-hover:opacity-100
    #{ large ? 'h-6' : 'h-4 -right-[6px]' }
    #{ 'opacity-0' unless highlight }
    #{ underline_attr_class }
  ".strip
%>

<%
  content_attr_class = content_attr[:class]
  text_attr_class    = text_attr[:class]
%>

<%
  inner = capture do
%>
  <%= tag.span(
    class: "som-link-content #{'som-link-hop' if hop} #{'som-link-push' if animate_push} #{content_attr_class}".strip,
    **content_attr.except(:class)
  ) do %>
    <% if local_assigns[:icon] %>
      <%= inline_svg "icons/#{icon}.svg", class: icon_class %>
    <% end %>

    <%= tag.span(
      class: "text-nowrap tracking-tight #{http_method.to_s == 'get' ? 'pointer-events-none' : ''} #{text_attr_class}".strip,
      **text_attr.except(:class)
    ) do %>
      <%= text %>
    <% end %>
  <% end %>

  <%= tag.div(
    class: underline_class,
    data: { kind: "underline" }.merge(underline_data),
    **underline_attr.except(:class, :data)
  ) %>
<% end %>

<% if as_button %>
  <% btn_opts = { type: 'button', class: final_class } %>
  <% btn_opts[:data] = as_button[:data] if as_button[:data].is_a?(Hash) %>
  <%= content_tag :button, btn_opts do %>
    <%= inner %>
  <% end %>
<% else %>
  <% if http_method.to_s == 'get' %>
    <%= link_to target, class: final_class do %>
      <%= inner %>
    <% end %>
  <% else %>
    <%= button_to target, method: http_method, class: final_class do %>
      <%= inner %>
    <% end %>
  <% end %>
<% end %>
